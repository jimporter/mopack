name: build
on:
  pull_request:
  push:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:
    name: >
      build (${{ matrix.os }}${{
        startsWith(matrix.os, 'windows-') &&
        format('[{0}]', matrix.compiler) || ''
      }}, ${{ matrix.python-version }}${{
        matrix.conan-version != '1.*' &&
        format(', conan-{0}', matrix.conan-version) || ''
      }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [cc, msvc]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        conan-version: ['1.*']

        include:
          # Python 3.6 builds
          - {os: ubuntu-20.04, compiler: cc, python-version: '3.6',
             conan-version: '1.*'}

          # Conan 2.x builds
          - {os: ubuntu-latest, compiler: cc, python-version: '3.11',
             conan-version: '2.*', extra-tests: [apt, mingw-cross]}
          - {os: windows-latest, compiler: cc, python-version: '3.11',
             conan-version: '2.*', skipped-tests: [boost, qt]}
          - {os: windows-latest, compiler: msvc, python-version: '3.11',
             conan-version: '2.*', msvc-version: '14.3',
             win-sdk: '10.0.20348.0', boost-version: '1.80.0',
             qt-version: '5.15.2'}
          - {os: macos-latest, compiler: cc, python-version: '3.11',
             conan-version: '2.*'}

          # Extra settings for matrix builds
          - {os: ubuntu-latest, extra-tests: [apt, mingw-cross]}
          - {os: windows-latest, compiler: cc, skipped-tests: [boost, qt]}
          - {os: windows-latest, compiler: msvc, msvc-version: '14.3',
             win-sdk: '10.0.20348.0', boost-version: '1.80.0',
             qt-version: '5.15.2'}
        exclude:
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
      fail-fast: false
    env:
      MOPACK_EXTRA_TESTS: ${{ join(matrix.extra-tests, ' ') }}
      MOPACK_SKIPPED_TESTS: ${{ join(matrix.skipped-tests, ' ') }}

    steps:
      - uses: actions/checkout@v4
      - name: Cache Boost binaries
        if: startsWith(matrix.os, 'windows-') && matrix.boost-version
        uses: actions/cache@v3
        id: cache-boost
        with:
          path: C:\boost-${{ matrix.boost-version }}
          key: >
            ${{ matrix.os }}-boost-${{ matrix.boost-version }}-msvc-${{
            matrix.msvc-version }}-python-${{ matrix.python-version }}-${{
            hashFiles('.github/workflows/build.yml') }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Initialize MSVC ${{ matrix.msvc-version }}
        if: startsWith(matrix.os, 'windows-') && matrix.compiler == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: ${{ matrix.msvc-version }}
          arch: 'x64'
          sdk: ${{ matrix.win-sdk }}
      - name: Install Conan 1.x
        if: startsWith(matrix.conan-version, '1.')
        run: |
          pip install 'conan==${{ matrix.conan-version }}'
          conan profile new default --detect
      - name: Install Conan 2.x
        if: startsWith(matrix.conan-version, '2.')
        run: |
          pip install 'conan==${{ matrix.conan-version }}'
          conan profile detect
      - name: Install Python dependencies
        run: >
          pip install git+https://github.com/jimporter/bfg9000.git '.[test]'
      - name: Install Qt ${{ matrix.qt-version }}
        if: matrix.qt-version
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt-version }}
      - name: Install Boost ${{ matrix.boost-version }} from binaries
        if: startsWith(matrix.os, 'windows-') && matrix.boost-version
        run: |
          ${boostroot} = "C:\boost-${{ matrix.boost-version }}"
          ${msvcver} = "${{ matrix.msvc-version }}" -replace '(\d+\.\d).*','$1'
          if ("${{ steps.cache-boost.outputs.cache-hit }}" -ne "true" ) {
            ${boost_ver} = "${{ matrix.boost-version }}" -replace '\.','_'
            ${boostexe} = "boost_${boost_ver}-msvc-${msvcver}-64.exe"
            curl --retry 3 --retry-all-errors -LO https://sourceforge.net/projects/boost/files/boost-binaries/${{ matrix.boost-version }}/${boostexe}
            Start-Process -Wait -FilePath ".\${boostexe}" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=${boostroot}"
          }
          echo "BOOST_INCLUDEDIR=${boostroot}" >> ${env:GITHUB_ENV}
          echo "BOOST_LIBRARYDIR=${boostroot}\lib64-msvc-${msvcver}" >> ${env:GITHUB_ENV}
      - name: Install Linux dependencies
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt-get update && sudo apt-get install \
            libboost-dev libboost-regex-dev mingw-w64 ninja-build \
            qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
          echo "MOPACK_INCLUDE_PATH=/usr/include" >> .mopack_test_env
          echo "MOPACK_LIB_NAMES=lib{}.so" >> .mopack_test_env
          echo "MOPACK_LIB_PATH=/usr/lib/x86_64-linux-gnu" >> .mopack_test_env
      - name: Install Windows dependencies
        if: startsWith(matrix.os, 'windows-')
        run: |
          choco install ninja
          ${gnomebase} = "https://ftp.gnome.org/pub/gnome/binaries/win32"
          curl -LO ${gnomebase}/dependencies/pkg-config_0.26-1_win32.zip
          curl -LO ${gnomebase}/glib/2.28/glib_2.28.8-1_win32.zip
          curl -LO ${gnomebase}/dependencies/gettext-runtime_0.18.1.1-2_win32.zip
          7z x -y pkg-config_0.26-1_win32.zip -oC:\pkg-config
          7z x -y glib_2.28.8-1_win32.zip -oC:\pkg-config
          7z x -y gettext-runtime_0.18.1.1-2_win32.zip -oC:\pkg-config
          echo "PKG_CONFIG=C:\pkg-config\bin\pkg-config.exe" >> ${env:GITHUB_ENV}
          # Set up environment variables.
          if(${env:Qt5_DIR}) {
            echo "QT_ROOT=${env:Qt5_DIR}" >> ${env:GITHUB_ENV}
          }

          echo "MOPACK_LIB_NAMES={}.lib;lib{}.dll.a" >> .mopack_test_env
      - name: Install macOS dependencies
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew install ninja pkg-config boost qt5
          brew link qt5 --force
          echo "MOPACK_INCLUDE_PATH=/usr/local/include" >> .mopack_test_env
          echo "MOPACK_LIB_NAMES=lib{}.dylib" >> .mopack_test_env
          echo "MOPACK_LIB_PATH=/usr/local/lib" >> .mopack_test_env
      - name: Set up cl.exe
        if: matrix.compiler == 'msvc'
        run: |
          echo "CC=cl.exe" >> ${env:GITHUB_ENV}
          echo "CXX=cl.exe" >> ${env:GITHUB_ENV}
      - name: Set up mingw
        if: startsWith(matrix.os, 'windows-') && matrix.compiler == 'cc'
        run: |
          echo "PATH=C:\msys64\mingw64\bin;${env:PATH}" >> ${env:GITHUB_ENV}
          echo "INCLUDE_PATH=C:\msys64\mingw64\include;${env:INCLUDE_PATH}" >> ${env:GITHUB_ENV}
          echo "CC=gcc" >> ${env:GITHUB_ENV}
          echo "CXX=g++" >> ${env:GITHUB_ENV}
      - name: Run tests
        run: |
          python setup.py coverage -q
          coverage xml
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
  build-cygwin:
    name: >
      build (windows-latest[cygwin], 3.8${{
        matrix.conan-version != '1.*' &&
        format(', conan-{0}', matrix.conan-version) || ''
      }})
    runs-on: windows-latest
    strategy:
      matrix:
        conan-version: ['1.*', '2.*']
      fail-fast: false
    env:
      CYGROOT: C:\cygwin
      CYGCACHE: C:\cygwin\var\cache\setup
      MOPACK_SKIPPED_TESTS: qt

    steps:
      - uses: actions/checkout@v4
      - name: Install Cygwin
        shell: cmd
        run: >
          curl -LO https://cygwin.com/setup-x86_64.exe

          .\setup-x86_64.exe -qgnNdO -R %CYGROOT% -l %CYGCACHE%
          -s http://mirrors.kernel.org/sourceware/cygwin/
          -P cmake,gcc-g++,git,jq,libboost-devel,make,ninja,pkg-config,python38
          -P python38-pip,python38-setuptools,python38-wheel
      - name: Copy mopack to Cygwin
        run: |
          echo "MOPACK_INCLUDE_PATH=/usr/include" >> .mopack_test_env
          echo "MOPACK_LIB_NAMES=lib{}.dll.a" >> .mopack_test_env
          echo "MOPACK_LIB_PATH=/usr/lib" >> .mopack_test_env
          robocopy . ${env:CYGROOT}\home\runneradmin\mopack /E
          if(${LastExitCode} -le 7) { ${LastExitCode} = 0 }
      - name: Install Conan 1.x
        if: startsWith(matrix.conan-version, '1.')
        # FIXME: Don't install conan from Git once they release v1.61.
        run: >
          C:\cygwin\bin\bash -lc
          "pip3.8 install git+https://github.com/conan-io/conan.git@develop &&
          conan profile new default --detect &&
          conan profile update settings.os.subsystem=cygwin default &&
          echo tools.cmake.cmaketoolchain:generator=Ninja >> ~/.conan/global.conf"
      - name: Install Conan 2.x
        if: startsWith(matrix.conan-version, '2.')
        run: >
          C:\cygwin\bin\bash -lc
          "pip3.8 install 'conan==${{ matrix.conan-version }}' &&
          conan profile detect &&
          sed -i 's/CYGWIN_NT.*/Windows/' ~/.conan2/profiles/default &&
          echo tools.microsoft.bash:subsystem=cygwin >> ~/.conan2/global.conf &&
          echo tools.microsoft.bash:active=True >> ~/.conan2/global.conf &&
          echo tools.cmake.cmaketoolchain:generator=Ninja >> ~/.conan2/global.conf"
      - name: Install Python dependencies
        run: >
          C:\cygwin\bin\bash -lc
          "cd mopack &&
          pip3.8 install git+https://github.com/jimporter/bfg9000.git '.[test]'"
      - name: Run tests
        run: >
          C:\cygwin\bin\bash -lc
          "cd mopack &&
          python3.8 setup.py coverage -q &&
          coverage xml"
      - name: Copy coverage from Cygwin
        run: |
          copy C:\cygwin\home\runneradmin\mopack\coverage.xml .
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install '.[test]'
      - name: Run lint
        run: |
          flake8
